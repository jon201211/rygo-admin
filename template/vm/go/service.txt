/* ==========================================================================
 RYGO Code AutoGen  
 create time：{{.table.CreateTime}}
 ==========================================================================*/
package service

import (
	"errors"
	"github.com/gin-gonic/gin"
	"time"
	{{.table.PackageName}}/app/model
	{{.table.PackageName}}/app/dao

	"{{.table.PackageName}}/app/utils/convert"
	"{{.table.PackageName}}/app/utils/page"
)


var {{.BigBusinessName}}Service = new{{.BigBusinessName}}Service()

func new{{.BigBusinessName}}Service() *{{.table.BusinessName}}Service {
	return &{{.table.BusinessName}}Service{}
}

type {{.table.BusinessName}}Service struct {
}


//根据主键查询数据
func (s *{{.table.BusinessName}}Service) SelectRecordById(id {{.table.PkColumn.GoType}}) (*model.{{.BigBusinessName}}Entity, error) {
	entity := &model.{{.BigBusinessName}}Entity{ {{.table.PkColumn.GoField}}: id}
	_, err := dao.{{.BigBusinessName}}Dao.FindOne(entity)
	return entity, err
}

//根据主键删除数据
func (s *{{.table.BusinessName}}Service) DeleteRecordById(id {{.table.PkColumn.GoType}}) bool {
	rs, err := (&model.{{.BigBusinessName}}Entity{ {{.table.PkColumn.GoField}}: id}).Delete()
	if err == nil {
		if rs > 0 {
			return true
		}
	}
	return false
}

//批量删除数据记录
func (s *{{.table.BusinessName}}Service) DeleteRecordByIds(ids string) int64 {
	ida := convert.ToInt64Array(ids, ",")
	result, err := dao.{{.BigBusinessName}}Dao.DeleteBatch(ida...)
	if err != nil {
		return 0
	}
	return result
}

//添加数据
func (s *{{.table.BusinessName}}Service) AddSave(req *model.{{.BigBusinessName}}AddReq, ctx *gin.Context) ({{.table.PkColumn.GoType}}, error) {
	var entity model.{{.BigBusinessName}}Entity
	{{range $index, $column := .table.Columns}} {{if eq $column.IsInsert "1"}}
	entity.{{$column.GoField}} = req.{{$column.GoField}}{{end}} {{end}}
	entity.CreateTime = time.Now()
	entity.CreateBy = ""

	user := UserService.GetProfile(ctx)

	if user != nil {
		entity.CreateBy = user.LoginName
	}

	_, err := dao.{{.BigBusinessName}}Dao.Insert(&entity)
	return entity.{{.table.PkColumn.GoField}}, err
}

//修改数据
func (s *{{.table.BusinessName}}Service) EditSave(req *model.{{.BigBusinessName}}EditReq, ctx *gin.Context) (int64, error) {
	entity := &model.{{.BigBusinessName}}Entity{ {{.table.PkColumn.GoField}}: req.{{.table.PkColumn.GoField}} }
	ok, err := dao.{{.BigBusinessName}}Dao.FindOne(entity)

	if err != nil {
		return 0, err
	}

	if !ok {
		return 0, errors.New("数据不存在")
	}

	{{range $index, $column := .table.Columns}} {{if eq $column.IsEdit "1"}}
	entity.{{$column.GoField}} = req.{{$column.GoField}}{{end}} {{end}}
	entity.UpdateTime = time.Now()
	entity.UpdateBy = ""

	user := UserService.GetProfile(ctx)

	if user == nil {
		entity.UpdateBy = user.LoginName
	}

	return dao.{{.BigBusinessName}}Dao.Update(&entity)
}

//根据条件查询数据
func (s *{{.table.BusinessName}}Service) SelectListAll(params *model.{{.BigBusinessName}}SelectPageReq) ([]model.{{.BigBusinessName}}Entity, error) {
	return dao.{{.BigBusinessName}}Dao.SelectListAll(params)
}

//根据条件分页查询数据
func (s *{{.table.BusinessName}}Service) SelectListByPage(params *model.{{.table.BusinessName}}SelectPageReq) ([]model.{{.BigBusinessName}}Entity, *page.Paging, error) {
	return dao.{{.BigBusinessName}}Dao.SelectListByPage(params)
}

// 导出excel
func (s *{{.table.BusinessName}}Service) Export(param *model.{{.table.BusinessName}}SelectPageReq) (string, error) {
	head := []string{ {{range $index, $column := .table.Columns}} {{if eq $index 0}}"{{$column.ColumnComment}}"{{else}},"{{$column.ColumnComment}}"{{end}}{{end}}}
	col := []string{ {{range $index, $column := .table.Columns}} {{if eq $index 0}}"{{$column.ColumnName}}"{{else}},"{{$column.ColumnName}}"{{end}}{{end}}}
	return dao.{{.BigBusinessName}}Dao.SelectListExport(param, head, col)
}