/* ==========================================================================
 RYGO Code AutoGen  
 create time：{{.table.CreateTime}}
 ==========================================================================*/
package controller

import (
	"github.com/gin-gonic/gin"
	"{{.table.PackageName}}/app/controller/base"

	"{{.table.PackageName}}/app/model"
	"{{.table.PackageName}}/app/service"
	"{{.table.PackageName}}/app/response"
	"{{.table.PackageName}}/app/utils/gconv"
)

type {{.BigBusinessName}}Controller struct {
	base.BaseController
}

//列表页
func (c* {{.BigBusinessName}}Controller) List(ctx *gin.Context) {
	response.BuildTpl(ctx, "{{.table.BusinessName}}/list.html").WriteTpl()
}

//列表分页数据
func (c* {{.BigBusinessName}}Controller) ListAjax(ctx *gin.Context) {
	req := new(model.{{.BigBusinessName}}SelectPageReq)
	//获取参数
	if err := ctx.ShouldBind(req); err != nil {
		response.ErrorResp(ctx).SetMsg(err.Error()).Log("{{.table.BusinessName}}管理", req).WriteJsonExit()
		return
	}
	rows := make([]model.{{.BigBusinessName}}Entity, 0)
	result, page, err := service.{{.BigBusinessName}}Service.SelectListByPage(req)

	if err == nil && len(result) > 0 {
		rows = result
	}

	response.BuildTable(ctx, page.Total, rows).WriteJsonExit()
}

//新增页面
func (c* {{.BigBusinessName}}Controller) Add(ctx *gin.Context) {
	response.BuildTpl(ctx, "{{.table.BusinessName}}/add.html").WriteTpl()
}

//新增页面保存
func (c* {{.BigBusinessName}}Controller) AddSave(ctx *gin.Context) {
	req := new(model.{{.BigBusinessName}}AddReq)
	//获取参数
	if err := ctx.ShouldBind(req); err != nil {
		response.ErrorResp(ctx).SetBtype(model.Buniss_Add).SetMsg(err.Error()).Log("{{.table.FunctionName}}新增数据", req).WriteJsonExit()
		return
	}

	id, err := service.{{.BigBusinessName}}Service.AddSave(req, ctx)

	if err != nil || id <= 0 {
		response.ErrorResp(ctx).SetBtype(model.Buniss_Add).Log("{{.table.FunctionName}}新增数据", req).WriteJsonExit()
		return
	}
	response.SucessResp(ctx).SetData(id).Log("{{.table.FunctionName}}新增数据", req).WriteJsonExit()
}

//修改页面
func (c* {{.BigBusinessName}}Controller) Edit(ctx *gin.Context) {
	id := gconv.Int64(ctx.Query("id"))

	if id <= 0 {
		response.ErrorTpl(ctx).WriteTpl(gin.H{
			"desc": "参数错误",
		})
		return
	}

	entity, err := service.{{.BigBusinessName}}Service.SelectRecordById(id)

	if err != nil || entity == nil {
		response.ErrorTpl(ctx).WriteTpl(gin.H{
			"desc": "数据不存在",
		})
		return
	}

	response.BuildTpl(ctx, "{{.table.BusinessName}}/edit.html").WriteTpl(gin.H{
		"{{.table.BusinessName}}": entity,
	})
}

//修改页面保存
func (c* {{.BigBusinessName}}Controller) EditSave(ctx *gin.Context) {
	req := new(model.{{.BigBusinessName}}EditReq)
	//获取参数
	if err := ctx.ShouldBind(req); err != nil {
		response.ErrorResp(ctx).SetBtype(model.Buniss_Edit).SetMsg(err.Error()).Log("{{.table.FunctionName}}修改数据", req).WriteJsonExit()
		return
	}

	rs, err := service.{{.BigBusinessName}}Service.EditSave(req, ctx)

	if err != nil || rs <= 0 {
		response.ErrorResp(ctx).SetBtype(model.Buniss_Edit).Log("{{.table.FunctionName}}修改数据", req).WriteJsonExit()
		return
	}
	response.SucessResp(ctx).SetBtype(model.Buniss_Edit).Log("{{.table.FunctionName}}修改数据", req).WriteJsonExit()
}

//删除数据
func (c* {{.BigBusinessName}}Controller) Remove(ctx *gin.Context) {
	req := new(model.{{.BigBusinessName}}RemoveReq)
	//获取参数
	if err := ctx.ShouldBind(req); err != nil {
		response.ErrorResp(ctx).SetBtype(model.Buniss_Del).SetMsg(err.Error()).Log("{{.table.FunctionName}}删除数据", req).WriteJsonExit()
		return
	}

	rs := service.{{.BigBusinessName}}Service.DeleteRecordByIds(req.Ids)

	if rs > 0 {
		response.SucessResp(ctx).SetBtype(model.Buniss_Del).Log("{{.table.FunctionName}}删除数据", req).WriteJsonExit()
	} else {
		response.ErrorResp(ctx).SetBtype(model.Buniss_Del).Log("{{.table.FunctionName}}删除数据", req).WriteJsonExit()
	}
}

//导出
func (c* {{.BigBusinessName}}Controller) Export(ctx *gin.Context) {
	req := new(model.{{.BigBusinessName}}SelectPageReq)
	//获取参数
	if err := ctx.ShouldBind(req); err != nil {
		response.ErrorResp(ctx).Log("{{.table.FunctionName}}导出数据", req).WriteJsonExit()
		return
	}
	url, err := service.{{.BigBusinessName}}Service.Export(req)

	if err != nil {
		response.ErrorResp(ctx).SetBtype(model.Buniss_Other).Log("{{.table.FunctionName}}导出数据", req).WriteJsonExit()
		return
	}
	response.SucessResp(ctx).SetBtype(model.Buniss_Other).SetMsg(url).WriteJsonExit()
}